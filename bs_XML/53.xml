<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\spaes\Desktop\min\bs\53.txt"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><specifier>inline</specifier> <name>bool</name></type> <name>rd</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>ret</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>sgn</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>c</name><operator>==</operator><name>EOF</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <while>while<condition>(<expr><name>c</name><operator>!=</operator><literal type="char">'-'</literal><operator>&amp;&amp;</operator><operator>(</operator><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt><expr><name>sgn</name><operator>=</operator><ternary><condition><expr><operator>(</operator><name>c</name><operator>==</operator><literal type="char">'-'</literal><operator>)</operator></expr>?</condition><then><expr><operator>-</operator><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name><operator>=</operator><ternary><condition><expr><operator>(</operator><name>c</name><operator>==</operator><literal type="char">'-'</literal><operator>)</operator></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><operator>(</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name><operator>=</operator><name>ret</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><operator>(</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt><expr><name>ret</name><operator>*=</operator><name>sgn</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><specifier>inline</specifier> <name>void</name></type> <name>pt</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><name>x</name><operator>&gt;</operator><literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>pt</name><argument_list>(<argument><expr><name>x</name><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>x</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="line" format="doxygen">///////////////////////</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">100000</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>
    <while>while<condition>(<expr><call><name>rd</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><expr_stmt><expr><call><name>rd</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><name><name>a</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">10000000</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>que</name></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>rd</name><argument_list>(<argument><expr><name>que</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>que</name><operator>--</operator></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>rd</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name><operator>+</operator><literal type="number">2</literal><operator>+</operator><name>n</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>a</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if<condition>(<expr><name><name>a</name><index>[<expr><name>v</name></expr>]</index></name> <operator>==</operator> <name>u</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>pt</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>pt</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
#include &lt;iostream&gt;
#include &lt;cmath&gt;
#include &lt;algorithm&gt;
#include &lt;cstdio&gt;

using namespace std;

template &lt;class T&gt;
inline bool rd(T &amp;ret) {
    char c; int sgn;
    if(c=getchar(),c==EOF) return 0;
    while(c!='-'&amp;&amp;(c&lt;'0'||c&gt;'9')) c=getchar();
    sgn=(c=='-')?-1:1;
    ret=(c=='-')?0:(c-'0');
    while(c=getchar(),c&gt;='0'&amp;&amp;c&lt;='9') ret=ret*10+(c-'0');
    ret*=sgn;
    return 1;
}
template &lt;class T&gt;
inline void pt(T x) {
    if (x &lt;0) {
        putchar('-');
        x = -x;
    }
    if(x&gt;9) pt(x/10);
    putchar(x%10+'0');
}

const int N = 100005;
int a[N], n;

int main(){
    while(rd(n)){
        for(int i = 1; i &lt;= n; i++)rd(a[i]);
        for(int i = 2; i &lt;= n; i++)a[i]+=a[i-1];
        a[0] = -100;
        a[n+1] = 10000000;
        int que, u; rd(que);
        while(que--){
            rd(u);
            int v = lower_bound(a+1, a+2+n, u) - a;
            if(a[v] == u)
                pt(v);
            else
                pt(v); putchar('\n');
        }
    }
    return 0;
}
*/</comment>
</unit>
