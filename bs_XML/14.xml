<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\spaes\Desktop\min\bs\14.txt"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<comment type="block">/*#include &lt;boost/multiprecision/cpp_int.hpp&gt; */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gc</name></cpp:macro> <cpp:value>getchar_unlocked</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pp</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bigint</name></cpp:macro> <cpp:value>boost::multiprecision::cpp_int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>1000000000000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>finp</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>


<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pp</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>bins</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>low</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>high</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>

  <while>while<condition>(<expr><name>low</name><operator>&lt;=</operator><name>high</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>low</name><operator>==</operator><name>high</name></expr>)</condition><block type="pseudo"><block_content><break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>(<expr><name>low</name><operator>+</operator><literal type="number">1</literal><operator>==</operator><name>high</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><name><name>v</name><index>[<expr><name>low</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&lt;</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name>low</name><operator>=</operator><name>high</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>low</name><operator>+</operator><name>high</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name><name>v</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&lt;</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name>low</name><operator>=</operator><name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>high</name><operator>=</operator><name>mid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if<condition>(<expr><name><name>v</name><index>[<expr><name>low</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&lt;</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name>low</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>low</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>finp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pref</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0LL</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&gt;&gt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <expr_stmt><expr><name><name>pref</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>pref</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
  </block_content>}</block></for>


  <decl_stmt><decl><type><name>ll</name></type> <name>mans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>pos</name><init>=<expr><call><name>bins</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>+</operator><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>mans</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>mans</name></expr></argument>,<argument><expr><name><name>pref</name><index>[<expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>pref</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>mans</name></expr>;</expr_stmt>


<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function></unit>
