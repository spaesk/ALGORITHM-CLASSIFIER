<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\spaes\Desktop\min\bs\35.txt"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;complex&gt;</cpp:file></cpp:include>
<comment type="line">//#include&lt;ext/rope&gt;</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)*(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lowbit</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)&amp;-(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fill</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(A,B,sizeof(A))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Copy</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy(A,B,sizeof(A))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=A;i&lt;=B;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>B</name></type></parameter>,<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=B;i&gt;=A;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RE</name><parameter_list>(<parameter><type><name>B</name></type></parameter>,<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(A::iterator it=B.begin();it!=B.end();++it)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;(int)A;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=1;i&lt;(int)A;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>de</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=A-1;i+1;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>foredg</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=H[A];i;i=e[i].nxt)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>(1&lt;&lt;29)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mn</name></cpp:macro> <cpp:value>100011</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Mod</name></cpp:macro> <cpp:value>(1000000007)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eps</name></cpp:macro> <cpp:value>(1e-9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>si</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)x.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>A=max(A,B)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>A=min(A,B)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls</name></cpp:macro> <cpp:value>(cur&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rs</name></cpp:macro> <cpp:value>(cur&lt;&lt;1|1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sum</name><parameter_list>(<parameter><type><name>x1</name></type></parameter>,<parameter><type><name>y1</name></type></parameter>,<parameter><type><name>x2</name></type></parameter>,<parameter><type><name>y2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(s[x2][y2]-s[x1-1][y2]-s[x2][y1-1]+s[x1-1][y1-1])</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">//using namespace __gnu_cxx;</comment>
<comment type="line">//typedef rope&lt;int&gt; rop;</comment>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>multiset</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>Set</name>;</typedef>

<function><type><name>ll</name></type> <name>powmod</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content><decl_stmt><decl><type><name>ll</name></type> <name>tmp</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>a</name><operator>%=</operator><name>Mod</name></expr>;</expr_stmt><for>for<control>(<init>;</init><condition><expr><name>b</name></expr>;</condition><incr><expr><name>b</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr></incr>)</control><block>{<block_content><if_stmt><if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name>tmp</name><operator>=</operator><name>tmp</name><operator>*</operator><name>a</name><operator>%</operator><name>Mod</name></expr>;</expr_stmt></block_content></block></if></if_stmt><expr_stmt><expr><name>a</name><operator>=</operator><name>a</name><operator>*</operator><name>a</name><operator>%</operator><name>Mod</name></expr>;</expr_stmt></block_content>}</block></for><return>return <expr><name>tmp</name></expr>;</return></block_content>}</block></function>
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content><return>return <expr><ternary><condition><expr><name>b</name></expr>?</condition><then><expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><name>a</name></expr></else></ternary></expr>;</return></block_content>}</block></function>
<comment type="line">//template&lt;class T&gt;inline void R(T &amp;xx){xx=0;char ch=getchar();while(ch&lt;'0'||ch&gt;'9')ch=getchar();while(ch&gt;='0'&amp;&amp;ch&lt;='9')xx=xx+xx+(xx&lt;&lt;3)+ch-48,ch=getchar();}</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><specifier>inline</specifier> <name>void</name></type> <name>R</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>xx</name></decl></parameter>)</parameter_list><block>{<block_content><expr_stmt><expr><name>xx</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>bool</name></type> <name>F</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><operator>(</operator><name><name>ch</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>ch</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal><operator>)</operator><operator>&amp;&amp;</operator><name>ch</name><operator>!=</operator><literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while><if_stmt><if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name>F</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt><while>while<condition>(<expr><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name>xx</name><operator>=</operator><name>xx</name><operator>+</operator><name>xx</name><operator>+</operator><operator>(</operator><name>xx</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><name>ch</name><operator>-</operator><literal type="number">48</literal></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while><if_stmt><if>if<condition>(<expr><name>F</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name>xx</name><operator>=</operator><operator>-</operator><name>xx</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>x</name></decl>;</decl_stmt><decl_stmt><decl><type><name>ll</name></type> <name><name>s</name><index>[<expr><name>mn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"1.in"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//freopen("1.out","w",stdout);</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>R</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><call><name>R</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name>x</name></expr>;</expr_stmt>
    
    <for>for<control>(<init><expr><call><name>R</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</init><condition><expr><name>m</name><operator>--</operator></expr>;</condition><incr/>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>R</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><call><name>lower_bound</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>n</name></expr></argument>,<argument><expr><name>q</name></expr></argument>)</argument_list></call><operator>-</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function></unit>
