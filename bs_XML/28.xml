<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\spaes\Desktop\min\bs\28.txt">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
	 <decl_stmt><decl><type><name>int</name></type> <name>piles</name></decl>;</decl_stmt>
	 <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>piles</name></expr>;</expr_stmt>
	 <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>int</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	 <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>piles</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	 <block>{<block_content>
	     <decl_stmt><decl><type><name>int</name></type> <name>no</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	     <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>no</name></expr>;</expr_stmt>
	     <expr_stmt><expr><name>sum</name><operator>+=</operator><name>no</name></expr>;</expr_stmt>
	     <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></for>
	 <decl_stmt><decl><type><name>int</name></type> <name>worms</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	 <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>worms</name></expr>;</expr_stmt>
	 <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>labels</name></decl>;</decl_stmt>
	 <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>worms</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	 <block>{<block_content>
	     <decl_stmt><decl><type><name>int</name></type> <name>no</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	     <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>no</name></expr>;</expr_stmt>
	     <expr_stmt><expr><call><name><name>labels</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 </block_content>}</block></for>
	 <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>worms</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	 <block>{<block_content>
	     <decl_stmt><decl><type><name>int</name></type> <name>check</name><init>=<expr><call><name>upper_bound</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>labels</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-</operator><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	     <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>check</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	     
	 </block_content>}</block></for>
</block_content>}</block></function></unit>
