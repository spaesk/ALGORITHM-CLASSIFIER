<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\spaes\Desktop\min\dynamic\11.txt"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REP(i,0,n)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READER_BUF_SIZE</name></cpp:macro> <cpp:value>1048576</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITER_BUF_SIZE</name></cpp:macro> <cpp:value>1048576</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>reader_pt</name><init>=<expr><name>READER_BUF_SIZE</name></expr></init></decl>,<decl><type ref="prev"/><name>reader_last</name></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name><name>reader_buf</name><index>[<expr><name>READER_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>writer_pt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name><name>writer_buf</name><index>[<expr><name>WRITER_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mygc</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{if(reader_pt==READER_BUF_SIZE)reader_pt=0,reader_last=fread(reader_buf,sizeof(char),READER_BUF_SIZE,stdin);(c)=reader_buf[reader_pt++];}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mypc</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{if(writer_pt==WRITER_BUF_SIZE)writer_pt=0,fwrite(writer_buf,sizeof(char),WRITER_BUF_SIZE,stdout);writer_buf[writer_pt++]=(c);}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>myed</name></cpp:macro> <cpp:value>{fwrite(writer_buf,sizeof(char),writer_pt,stdout);writer_pt=0;}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>reader</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{<block_content><decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>,<decl><type ref="prev"/><name>m</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><operator>*</operator><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content><expr_stmt><expr><call><name>mygc</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><if_stmt><if>if<condition>(<expr><name>k</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><name>m</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><break>break;</break></block_content>}</block></if></if_stmt><if_stmt><if>if<condition>(<expr><literal type="char">'0'</literal><operator>&lt;=</operator><name>k</name><operator>&amp;&amp;</operator><name>k</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block>{<block_content><expr_stmt><expr><operator>*</operator><name>x</name><operator>=</operator><name>k</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt><break>break;</break></block_content>}</block></if></if_stmt></block_content>}</block></for><for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content><expr_stmt><expr><call><name>mygc</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><if_stmt><if>if<condition>(<expr><name><name>k</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>k</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content><break>break;</break></block_content></block></if></if_stmt><expr_stmt><expr><operator>*</operator><name>x</name><operator>=</operator><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>k</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block_content>}</block></for><if_stmt><if>if<condition>(<expr><name>m</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator><operator>=</operator><operator>-</operator><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block></function>
<function><type><name>void</name></type> <name>writer</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content><decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>sz</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>m</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt><if_stmt><if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name>m</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt><while>while<condition>(<expr><name>x</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name><name>buf</name><index>[<expr><name>sz</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>x</name><operator>%</operator><literal type="number">10</literal></expr><operator>,</operator><expr><name>x</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt></block_content></block></while><if_stmt><if>if<condition>(<expr><operator>!</operator><name>sz</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name><name>buf</name><index>[<expr><name>sz</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt><if_stmt><if>if<condition>(<expr><name>m</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><call><name>mypc</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt><while>while<condition>(<expr><name>sz</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><call><name>mypc</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>sz</name></expr>]</index></name><operator>+</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while><expr_stmt><expr><call><name>mypc</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name><name>A</name><index>[<expr><literal type="number">110000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cnt</name><index>[<expr><literal type="number">110000</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">110000</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>reader</name><argument_list>(<argument><expr><operator>&amp;</operator><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>N</argument>)</argument_list></macro> <expr_stmt><expr><call><name>reader</name><argument_list>(<argument><expr><name>A</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">100100</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>N</argument>)</argument_list></macro> <expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">110000</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">100080</literal></expr>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>ll</name><operator>)</operator><name>i</name><operator>*</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>writer</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>myed</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
