<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="C:\Users\spaes\Desktop\min\dynamic\54.txt"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;(int)(n);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).begin(), (c).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>valid</name><parameter_list>(<parameter><type><name>y</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>h</name></type></parameter>,<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(0&lt;=y&amp;&amp;y&lt;h&amp;&amp;0&lt;=x&amp;&amp;x&lt;w)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tpl</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_tuple(__VA_ARGS__)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>bool</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <if_stmt><if>if <condition>(<expr><name>a</name><operator>&lt;</operator><name>b</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>bool</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<block_content> <if_stmt><if>if <condition>(<expr><name>a</name><operator>&gt;</operator><name>b</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>ostream</name><modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>o</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list><block>{<block_content><expr_stmt><expr><name>o</name><operator>&lt;&lt;</operator><literal type="char">'['</literal></expr>;</expr_stmt><macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument>t</argument>)</argument_list></macro><block>{<block_content><if_stmt><if>if<condition>(<expr><name>i</name><operator>!=</operator><call><name><name>t</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name>o</name><operator>&lt;&lt;</operator><literal type="char">','</literal></expr>;</expr_stmt></block_content></block></if></if_stmt><expr_stmt><expr><name>o</name><operator>&lt;&lt;</operator><operator>*</operator><name>i</name></expr>;</expr_stmt></block_content>}</block><return>return <expr><name>o</name><operator>&lt;&lt;</operator><literal type="char">']'</literal></expr>;</return></block_content>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>S</name></parameter>,<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>ostream</name><modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>o</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list><block>{<block_content><return>return <expr><name>o</name><operator>&lt;&lt;</operator><literal type="char">'('</literal><operator>&lt;&lt;</operator><name><name>t</name><operator>.</operator><name>first</name></name><operator>&lt;&lt;</operator><literal type="char">','</literal><operator>&lt;&lt;</operator><name><name>t</name><operator>.</operator><name>second</name></name><operator>&lt;&lt;</operator><literal type="char">')'</literal></expr>;</return></block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>int</name></type> <name>N</name></parameter>,<parameter><type><name>class</name></type> <name>Tp</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>out</name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>Tp</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>int</name></type> <name>N</name></parameter>,<parameter><type><name>class</name></type> <name>Tp</name></parameter>,<parameter><type><name>class</name></type></parameter>,<parameter><type><name>class</name> <modifier>...</modifier></type><name>Ts</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>out</name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>o</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>Tp</name><modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list><block>{<block_content><if_stmt><if>if<condition>(<expr><name>N</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name>o</name><operator>&lt;&lt;</operator><literal type="char">','</literal></expr>;</expr_stmt></block_content></block></if></if_stmt><expr_stmt><expr><name>o</name><operator>&lt;&lt;</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>N</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>out</name><argument_list type="generic">&lt;<argument><expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>Tp</name></expr></argument>,<argument><expr><name>Ts</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name> <modifier>...</modifier></type><name>Ts</name></parameter>&gt;</parameter_list></template><type><name>ostream</name><modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type><name>o</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list><block>{<block_content><expr_stmt><expr><name>o</name><operator>&lt;&lt;</operator><literal type="char">'('</literal></expr>;</expr_stmt><expr_stmt><expr><call><name><name>out</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>Ts</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name>Ts</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>o</name><operator>&lt;&lt;</operator><literal type="char">')'</literal></expr>;</return></block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>output</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content><macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><block>{<block_content><if_stmt><if>if<condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">','</literal></expr>;</expr_stmt></block_content></block></if></if_stmt><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content>}</block><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>output</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{<block_content><macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><call><name>output</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>output</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{<block_content><if_stmt><if>if<condition>(<expr><name>t</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name>t</name><operator>=</operator><operator>-</operator><name>t</name></expr><operator>,</operator><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt><decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>c</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>t</name></expr>)</condition><block type="pseudo"><block_content><expr_stmt><expr><name><name>c</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>t</name><operator>%</operator><literal type="number">10</literal></expr><operator>,</operator><expr><name>t</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt></block_content></block></while><for>for<control>(<init><expr><name>k</name><operator>||</operator><operator>(</operator><name><name>c</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name><operator>=</operator><literal type="number">0</literal><operator>)</operator></expr>;</init><condition><expr><name>k</name></expr>;</condition><incr><expr><call><name>putchar</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><operator>--</operator><name>k</name></expr>]</index></name><operator>^</operator><literal type="number">48</literal></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for></block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>S</name></parameter>,<parameter><type><name>class</name> <modifier>...</modifier></type><name>T</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>output</name><parameter_list>(<parameter><decl><type><name>S</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name><modifier>...</modifier></type><name>t</name></decl></parameter>)</parameter_list><block>{<block_content><expr_stmt><expr><call><name>output</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>output</name><argument_list>(<argument><expr><name>t</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>bool</name></type> <name>input</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list><block>{<block_content><decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt><for>for<control>(<init><expr><name>t</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><operator>~</operator><name>c</name><operator>&amp;&amp;</operator><name>c</name><operator>-</operator><literal type="number">45</literal></expr>;</condition><incr/>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>~</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content><return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt><for>for<control>(<init><expr><name>c</name><operator>-</operator><literal type="number">45</literal><operator>&amp;&amp;</operator><operator>(</operator><name>n</name><operator>=</operator><literal type="number">0</literal><operator>,</operator><name>t</name><operator>=</operator><name>c</name><operator>^</operator><literal type="number">48</literal><operator>)</operator></expr>;</init><condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>t</name><operator>=</operator><literal type="number">10</literal><operator>*</operator><name>t</name><operator>+</operator><name>c</name><operator>-</operator><literal type="number">48</literal></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for><expr_stmt><expr><name>t</name><operator>=</operator><ternary><condition><expr><name>n</name></expr>?</condition><then><expr><operator>-</operator><name>t</name></expr></then><else>:<expr><name>t</name></expr></else></ternary></expr>;</expr_stmt><return>return <expr><literal type="number">1</literal></expr>;</return></block_content>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>S</name></parameter>,<parameter><type><name>class</name> <modifier>...</modifier></type><name>T</name></parameter>&gt;</parameter_list></template><type><name>bool</name></type> <name>input</name><parameter_list>(<parameter><decl><type><name>S</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>T</name><modifier>&amp;</modifier><modifier>...</modifier></type><name>t</name></decl></parameter>)</parameter_list><block>{<block_content><expr_stmt><expr><call><name>input</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name>input</name><argument_list>(<argument><expr><name>t</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">200000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><literal type="number">200000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">200000</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <while>while<condition>(<expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <block>{<block_content>
      <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>a</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>c</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument><literal type="number">100010</literal></argument>)</argument_list></macro> <block>{<block_content>
      <expr_stmt><expr><call><name>chmax</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>chmax</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>chmax</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>
</unit>
