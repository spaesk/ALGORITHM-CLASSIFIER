#include<cstdio>
#include<cstring>
#include<cmath>
#include<cstdlib>
#include<ctime>
#include<algorithm>
#include<string>
#include<iostream>
#include<map>
#include<queue>
#include<vector>
#include<set>
#include<stack>
#include<complex>
//#include<ext/rope>
#define pb push_back
#define mp make_pair
#define X first
#define Y second
#define sqr(x) ((x)*(x))
#define lowbit(x) ((x)&-(x))
#define fill(A,B) memset(A,B,sizeof(A))
#define Copy(A,B) memcpy(A,B,sizeof(A))
#define rep(i,A,B) for(int i=A;i<=B;i++)
#define dep(i,B,A) for(int i=B;i>=A;i--)
#define RE(B,A) for(A::iterator it=B.begin();it!=B.end();++it)
#define re(i,A) for(int i=0;i<(int)A;i++)
#define re1(i,A) for(int i=1;i<(int)A;i++)
#define de(i,A) for(int i=A-1;i+1;i--)
#define foredg(i,A) for(int i=H[A];i;i=e[i].nxt)
#define inf (1<<29)
#define mn 100011
#define Mod (1000000007)
#define eps (1e-9)
#define si(x) ((int)x.size())
#define MAX(A,B) A=max(A,B)
#define MIN(A,B) A=min(A,B)
#define ls (cur<<1)
#define rs (cur<<1|1)
#define sum(x1,y1,x2,y2) (s[x2][y2]-s[x1-1][y2]-s[x2][y1-1]+s[x1-1][y1-1])
using namespace std;
//using namespace __gnu_cxx;
//typedef rope<int> rop;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef multiset<pii> Set;

ll powmod(ll a,ll b) {ll tmp=1;a%=Mod;for(;b;b>>=1){if(b&1)tmp=tmp*a%Mod;a=a*a%Mod;}return tmp;}
ll gcd(ll a,ll b){return b?gcd(b,a%b):a;}
//template<class T>inline void R(T &xx){xx=0;char ch=getchar();while(ch<'0'||ch>'9')ch=getchar();while(ch>='0'&&ch<='9')xx=xx+xx+(xx<<3)+ch-48,ch=getchar();}
template<class T>inline void R(T &xx){xx=0;char ch=getchar();bool F=0;while((ch<'0'||ch>'9')&&ch!='-')ch=getchar();if(ch=='-')F=1,ch=getchar();while(ch>='0'&&ch<='9')xx=xx+xx+(xx<<3)+ch-48,ch=getchar();if(F)xx=-xx;}

int n,m,x;ll s[mn],q;
int main(){
#ifndef ONLINE_JUDGE
    freopen("1.in","r",stdin);
    //freopen("1.out","w",stdout);
#endif
    R(n);rep(i,1,n)R(x),s[i]=s[i-1]+x;
    
    for(R(m);m--;){
        R(q);
        printf("%d\n",lower_bound(s+1,s+1+n,q)-s);
    }
    return 0;
}