//#pragma GCC optimize("Ofast")
//#pragma GCC optimize ("unroll-loops")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#include <bits/stdc++.h>
#define ll long long
#define pll pair<ll,ll>
#define vpll vector<pll>
#define vppll vector< pair<ll , pll> >
#define pb push_back
#define eb emplace_back
#define vll vector<ll>
#define mp make_pair
#define F first
#define S second
#define bc(x) __builtin_popcountll(x)
#define init(x) memset(x,-1,sizeof(x))
#define clr(x) memset(x,0,sizeof(x))
#define max_pq priority_queue<ll>
#define min_pq priority_queue<ll,vector<ll>,greater<ll> >;
#define For(i,x,n) for(i=x; i<n; ++i)
#define inp(x) scanf("%lld",&x)
#define inp2(x,y) scanf("%lld %lld",&x, &y)
#define inp3(x,y,z) scanf("%lld %lld %lld",&x, &y, &z)
#define out(x) printf("%lld ",x)
#define br printf("\n")
#define T ll t; scanf("%lld",&t); while(t--)
#define MOD 1000000007
#define M   1000003
using namespace std;
//typedef tree<ll, null_type, less_equal<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

//ll modpow(ll a,ll b,ll m){ ll r=1; while(b>0) { if(b&1) r=(r*a)%m; a=(a*a)%m; b>>=1;} return r; }
/*ll seive[M];
void create()
{
    clr(seive);
    for(ll i=M-1;i>=2;--i)
    {
        for(ll j=i;j<M;j+=i)
            seive[j]=i;
    }
}*/

/*bool seive1[M];
void create1()
{
    clr(seive1);
    for(int i=2;i<M;++i)
    {
        if(!seive1[i])
        {
            for(int j=i<<1;j<M;j+=i)
                seive1[j]=true;
        }
    }
}*/
int main()
{
    ll n,q,i;
    inp2(n,q);

    ll a[n],k[q],cum[n+1];

    For(i,0,n)
        inp(a[i]);
    For(i,0,q)
        inp(k[i]);

    cum[0]=0;
    For(i,1,n+1)
        cum[i]=cum[i-1]+a[i-1];

    ll x=0,j=0;
    For(i,0,q)
    {
        if(cum[n]-x <= k[i])
        {
            x=0;
            out(n);
        }
        else
        {
            j = upper_bound(cum,cum+n+1, k[i]+x)-cum-1;
            x+=k[i];
            out(n-j);
        }
        br;
    }


    return 0;
} 