#include<vector>
#include<list>
#include<map>
#include<set>
#include<deque>
#include<queue>
#include<stack>
#include<bitset>
#include<algorithm>
#include<functional>
#include<numeric>
#include<utility>
#include<iostream>
#include<sstream>
#include<iomanip>
#include<cmath>
#include<cstdlib>
#include<cctype>
#include<string>
#include<cstring>
#include<cstdio>
#include<ctime>
#include<climits>
#include<complex>
#include<cassert>
#define mp make_pair
#define pb push_back
#define sz(x) (int)((x).size())
#define all(x) x.begin(),x.end()
#define clr(x) memset((x),0,sizeof(x))
#define cdp(x) memset((x),-1,sizeof(x))
#define rep(i,n) for (i=0;i<n;i++)
#define Rep(i,a,b) for (i=a;i<=b;i++)
#define ff(i,x) for (i=start[x];i!=-1;i=a[i].next)
#define foreach(e,x) for(__typeof(x.begin()) e=x.begin();e!=x.end();++e)
using namespace std;
const double eps=1e-8;
const double pi=acos(-1.0);
int dblcmp(double d){if (fabs(d)<eps)return 0;return d>eps?1:-1;}
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<string> vs;
typedef pair<int,int> pii;
typedef vector<pii> vpi;
struct edge 
{
    int u,v,w,next;
}a[555555];
int start[211111],tot=0;
inline void addedge(int u,int v,int w)
{
    a[tot].u=u;
    a[tot].v=v;
    a[tot].w=w;
    a[tot].next=start[u];
    start[u]=tot++;
}
int n,m,s;
queue<int>q;
int que[211111],d[211111];
vpi e;
struct iii 
{
    int a,b,c;
    iii(){}
    iii(int _a,int _b,int _c)
    {
        a=_a;
        b=_b;
        c=_c;
    }
    bool operator==(const iii gg)const 
    {
        return a==gg.a&&b==gg.b&&c==gg.c;
    }
    bool operator<(const iii gg)const 
    {
        if (a==gg.a)
        {
            if (b==gg.b)return c<gg.c;
            return b<gg.b;
        }
        return a<gg.a;
    }
};
vector<iii>r;
int main()
{
    int i,j,k;
    scanf("%d%d%d",&n,&m,&s);
    cdp(start);tot=0;
    for (i=0;i<m;i++)
    {
        int q,w,e;
        scanf("%d%d%d",&q,&w,&e);
        addedge(q,w,e);
        addedge(w,q,e);
    }
    int l;
    scanf("%d",&l);
    q.push(s);
    clr(que);
    que[s]=1;
    for (i=0;i<211111;i++)d[i]=1111111111;
    d[s]=0;
    while (!q.empty())
    {
        int t=q.front();q.pop();
        que[t]=0;
        ff(i,t)
        {
            if (d[a[i].v]>d[t]+a[i].w)
            {
                d[a[i].v]=d[t]+a[i].w;
                if (!que[a[i].v])
                {
                    que[a[i].v]=1;
                    q.push(a[i].v);
                }
            }
        }
    }
    int ans=0;
    for (i=1;i<=n;i++)ans+=d[i]==l;
    for (i=0;i<tot;i++)
    {
        //if (d[a[i].v]>d[a[i].u])
        {
            if (d[a[i].u]<l&&(l<d[a[i].u]+a[i].w))
            {
                //&&l<=d[a[i].v]+a[i].w-(l-d[a[i].u])
                //++ans;
                //printf("%d %d\n",a[i].u,a[i].v);
                int p=l-d[a[i].u];
                if (d[a[i].v]+a[i].w-p>=l)
                {
                    int u=a[i].u,v=a[i].v;
                    if (u>v)
                    {
                        swap(u,v);
                        p=a[i].w-p;
                    }
                    r.pb(iii(u,v,p));
                }
            }
        }
    }
    sort(all(r));
    r.erase(unique(all(r)),r.end());
    ans+=sz(r);
    printf("%d\n",ans);
    return 0;
}
    
    