#include<bits/stdc++.h>
#define int long long
#define ll long long
#define maxN 5005
#define rep(i,n) for(int i=0;i<n;i++)
#define refv(i,l,r) for(int i=l;i<r;i++)
#define rerv(i,l,r) for(int i=l;i>r;i--)
#define pi pair<ll,ll>
#define pii pair<ll,pair<ll,ll> >
int power(int x, unsigned int y){int res = 1;while (y > 0){ if (y & 1){res = res*x;} y = y>>1;x = x*x;}return res;}
int powermod(int x, unsigned int y, int p){int res = 1;x = x % p;while (y > 0){if (y & 1){res = (res*x) % p;}y = y>>1; x = (x*x) % p;}return res;}
#define pb push_back
#define mp make_pair
#define all(x) x.begin(),x.end()
#define inf 10000000000000
#define F first
#define S second
#define mod 1000000007
#define printvector(v) for(int i= 0;i<v.size();i++) {cout<<v[i]<<" ";} cout<<endl;
#define printset(s) for(auto it = s.begin();it!=S.end();it++){cout<<*it<<" ";} cout<<endl;
#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
using namespace std;

//#include <ext/pb_ds/assoc_container.hpp>
//#include <ext/pb_ds/tree_policy.hpp>
//using namespace __gnu_pbds;

//#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
string convertupper(string s)
{
    transform(s.begin(), s.end(), s.begin(), ::toupper);
    return s;
}
string convertlower(string s)
{
    transform(s.begin(), s.end(), s.begin(), ::tolower);
    return s;
}
vector<int> g[maxN];
bool visited[maxN];
bool st[maxN];
bool cycle(int v)
{
    if(visited[v] == false) 
    { 
        visited[v] = true; 
        st[v] = true; 
  
        
        for(auto x: g[v]) 
        { 
            if ( !visited[x] && cycle(x) ) 
                return true; 
            else if (st[x]) 
                return true; 
        } 
  
    } 
    st[v] = false;  
    return false; 
}

map<pi,int> ump;
int arr[maxN];
void bfs(int node,int col)
{
    queue<pi> q;
    q.push({node,col});
    while(!q.empty())
    {
        pi temp=q.front();
        q.pop();
        visited[temp.F]=1;
        for(auto x: g[temp.F])
        {
            arr[ump[mp(temp.F,x)]]=temp.S;
            if(!visited[x])
            {   
                q.push({x,1-temp.S});
            }
        }
    }
}

vector<pi > edge;

int32_t main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);
    fastio;
    int n,m;
    cin>>n>>m;
    rep(i,m)
    {
        int x,y;
        cin>>x>>y;
        g[x].pb(y);
        edge.pb(mp(x,y));
        ump[mp(x,y)]=i;
    }
    int flag=0;
    for(int i = 1; i <= n; i++) 
       { if (cycle(i)) 
        {
            flag=1;
            break;
        }
        }
     
     memset(visited,0,sizeof(visited));    
       
    if(flag==1)
    {
        cout<<2<<endl;
        
        rep(i,m)
        {
            cout<<1 + (edge[i].F<edge[i].S) <<" ";
        }
        cout<<endl;
    }   
    else
    {
        cout<<1<<endl;
        rep(i,m)
        {
            cout<<1<<" ";
        }
        cout<<endl;
    }    

}
