#include <string>
#include <algorithm>
#include <cfloat>
#include <climits>
#include <cmath>
#include <complex>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <functional>
#include <iostream>
#include <map>
#include <memory>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <utility>
#include <vector>
#include <fstream>
#include <cassert>

using namespace std;


                                                                                                                                                              #define int ll
const bool online_judge =
#ifdef ONLINE_JUDGE
  true
#else
  false
#endif
  ;

typedef long long ll;
typedef unsigned long long ull;

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<string> vs;

typedef tuple<int,int> int2;
typedef tuple<int,int,int> int3;
typedef tuple<int,int,int,int> int4;

#define all(v)  (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define pb push_back
#define eb emplace_back
#define SZ(a) ((int)((a).size()))
#define rep(i,n) for(int i = 0; i < n; i++)
#define rep2(i,n) for(int i = 1; i <= n; i++)
#define rep3(i,n) for(int i = n-1; i >= 0; i--)
#define tag(i,v) rep(i,SZ(v))
#define _trace(x) #x << " = " << (x)
#define trace(x)  { if(!online_judge) cerr << _trace(x) << endl; }
#define trace2(x,y) { if(!online_judge) cerr << _trace(x) << " " << _trace(y) << endl; }
#define trace3(x,y,z) { if(!online_judge) cerr << _trace(x) << " " << _trace(y) << " " << _trace(z) << endl; }
#define tracev(x) { if(!online_judge) { cerr << #x << " = "; tag(__i, x) { cerr << x[__i] << ","; } cerr << endl; } }
#define fst get<0>
#define snd get<1>
#define thd get<2>
#define divup(x,y) ((x)/(y)+(0<((x)%(y))))
#define mp make_tuple
#define range(x,a,b) ((x) >= (a) && (x) <= (b))

const int inf = 1LL << 60;

namespace graph {

  class edge {
  public:
    int src;
    int dst;
    int w;
    edge(int _src, int _dst, int _w){
      src = _src;
      dst = _dst;
      w = _w;
    }

    const bool operator<(const edge &e) const {
      return make_tuple(w,src,dst) < make_tuple(e.w, e.src, e.dst);
    }
    const bool operator>(const edge &e) const {
      return make_tuple(w,src,dst) > make_tuple(e.w, e.src, e.dst);
    }

  };
  
  class t {
  public:
    vector<vector<edge>> p;

    t(int n){
      p = vector<vector<edge>>(n, vector<edge>());
    }

    const int size() const {
      return p.size();
    }

    const vector<edge> get_edges(int i) const {
      return p[i];
    }

    void add_edge(int src, int dst, int w){
      p[src].pb(edge(src, dst, w));
    }

  };

  void dijkstra(const t &graph, int start, vector<int> &ans, vector<int> & prev){
    const int n = graph.size();
    ans = vi(n, inf); ans[start] = 0;
    prev = vi(n, -1);
    priority_queue<edge, vector<edge>, greater<edge>> q;
    
    for(q.push(edge(-2, start, 0)); !q.empty(); ){
      const edge e = q.top(); q.pop();
      if(prev[e.dst] != -1)
	continue;
      prev[e.dst] = e.src;
      const vector<edge> edges = graph.get_edges(e.dst);
      for(int i = 0; i < SZ(edges); i++){
	edge f = edges[i];
	if(e.w + f.w < ans[f.dst]){
	  ans[f.dst] = e.w + f.w;
	  q.push(edge(f.src, f.dst, e.w + f.w));
	}
      }
    }
  }

  void visualize(const t &g, ostream &os){
    os << "digraph sample {" << endl;
    const int n = g.size();
    rep(i,n){
      vector<edge> edges = g.get_edges(i);
      for(int j = 0; j < SZ(edges); j++){
	edge e = edges[j];
	os << e.src << " -> " << e.dst << "[label = \"" << e.w << "\"];" << endl;
      }
    }
    os << "}" << endl;
  }

  vi build_path(vi prev, int end){
    vi path;
    while(prev[end] >= 0){
      path.pb(end);
      end = prev[end];
    }
    reverse(all(path));
    return path;
  }

}

void run() {

  /* entry point */
  int n,m,s,l;
  cin>>n>>m>>s;
  s--;

  graph::t g(n);

  vector<int3> edges;

  rep(i,m){
    int u,v,w;
    cin >> u >> v >> w;
    u--;
    v--;
    g.add_edge(u,v,w);
    g.add_edge(v,u,w);
    edges.eb(u,v,w);
  }

  cin >> l;

  ofstream f("graph.dot");
  visualize(g,f);

  vi ans, prev;

  dijkstra(g,s,ans,prev);

  int res = 0;

  tag(i,ans){
    if(ans[i] == l){
      res++;
    }
  }

  tag(i,edges){
    int u = fst(edges[i]);
    int v = snd(edges[i]);
    int w = thd(edges[i]);

    int cu = ans[u];
    int cv = ans[v];
    if(cu < l && cu+w > l){
      if(l < (cv + (w-(l-cu))))
	 res++;
    }
    if(cv < l && cv+w > l){
      if(l <= (cu + (w-(l-cv))))
	res++;
    }
  }

  cout << res << endl;

}

#undef int

int main(int argc, char *argv[]) {

  #if 0
  if(online_judge){
    freopen("input.txt", "rt", stdin);
    freopen("output.txt", "wt", stdout);
  }
  #endif

  run();

  return 0;

}
