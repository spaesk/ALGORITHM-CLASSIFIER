#define _CRT_SECURE_NO_DEPRECATE
#include <ctime>
#include <float.h>
#include <algorithm>
#include <string>
#include <vector>
#include <queue>
#include <iostream>
#include <cmath>
#include <sstream>
#include <map>
#include <set>
#include <cstring>
#include <cstdio>
#include <iomanip>
using namespace std;
#define pb push_back
#define inf 1000000000
#define L(s) (int)(s).size()
#define rp(i,n) for(int (i)=0;(i)<(n);++(i))
#define C(a) memset((a),0,sizeof(a))
#define ll long long
#define all(c) (c).begin(), (c).end()
#define VI vector<int>
#define mp make_pair
#define pii pair<int,int>
#define x first
#define y second
#define uint unsigned int
#define ull unsigned ll
#define eps 1e-12
#define b(x) (1<<(x))
VI a[111111], l[111111];
int d[111111], n, m, s, need;
struct T {
  int v ,d;
};
inline bool operator<(const T&a, const T&b) {
  return a.d  >b.d;
}
priority_queue<T> q;
int main() {
  scanf("%d%d%d", &n, &m, &s);
  --s;
  for(int i = 0; i < m; ++i) {
    int st, fn, len;
    scanf("%d%d%d", &st ,&fn, &len);
    --st; --fn;
    a[st].pb(fn);
    a[fn].pb(st);
    l[st].pb(len);
    l[fn].pb(len);
  }
  scanf("%d", &need);
  memset(d, 63, sizeof(d));
  T el;
  el.v = s; el.d = 0;
  d[s] = 0;
  q.push(el);
  while(!q.empty()) {
    T el = q.top();
    q.pop();
    if (d[el.v] != el.d) continue;
    rp(i, L(a[el.v])) {
      T nv;
      nv.v = a[el.v][i];
      nv.d = el.d + l[el.v][i];
      if (d[nv.v] > nv.d) {
        d[nv.v] = nv.d;
        q.push(nv);
      }
    }
  }
  int ans = 0;
  rp(i, n) {
    if (d[i] == need) {
      ++ans;
    }
  }
  rp(v, n) {
      rp(i, L(a[v])) {
        if (d[v] + l[v][i] > need && d[v] < need) {
          if (d[a[v][i]] + l[v][i] - (need - d[v]) > need || (d[a[v][i]] + l[v][i] - (need - d[v]) == need && a[v][i] > v)) {
            ++ans;
          }
      }
    }
  }
  cout << ans << endl;
  return 0;
}
