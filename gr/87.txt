#pragma comment(linker,"/STACK:300000000")
#define _CRT_SECURE_NO_WARNINGS
#pragma warning(disable:4800)

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <map>
#include <set>
#include <iomanip>
#include <memory.h>
#include <cstdio>
#include <sstream>
#include <deque>
#include <bitset>
#include <numeric>
#include <ctime>
#include <queue>

using namespace std;

#define show(x) cout << #x << " = " << (x) << endl;
#define fori(i,n) for(int i = 0; i < (n); i++)
#define forab(i,a,b) for(int i = (a); i <= (b); i++)
#define sz(v) int((v).size())
#define all(v) (v).begin(),(v).end()
const double pi = 3.1415926535897932384626433832795;
template<class T> T abs(const T &a) { return a >= 0 ? a : -a; };
template<class T> T sqr(const T &x) { return x * x; }
typedef pair<int,int> ii;
typedef long long ll;
///////////////////////////////////////

vector<vector<ii> > g;
int n, m, L, start;
vector<int> dist;

void dij()
{
    int ans = 0;
    dist.resize(n,int(1e9));
    dist[start] = 0;
    set<ii> q;
    q.insert(ii(0,start));
    while(!q.empty())
    {
        ii p = *q.begin();
        q.erase(q.begin());
        int k = p.second;
        fori(i,sz(g[k]))
        {
            int to = g[k][i].first;
            int w = g[k][i].second;
            if(dist[k]+w < dist[to])
            {
                if(dist[to] != int(1e9))
                    q.erase(ii(dist[to],to));
                dist[to] = dist[k]+w;
                q.insert(ii(dist[to],to));
            }
        }
    }
}

int main()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
#endif
    cin >> n >> m >> start;
    start--;
    g.resize(n);
    fori(i,m)
    {
        int x, y, w;
        cin >> x >> y >> w;
        w *= 2;
        x--, y--;
        g[x].push_back(ii(y,w));
        g[y].push_back(ii(x,w));
    }
    cin >> L;
    L *= 2;
    dij();
    int cnt = 0;
    fori(i,n)
    {
        if(dist[i] == L)
            cnt += 2;
        fori(j,sz(g[i]))
        {
            int to = g[i][j].first;
            int l = g[i][j].second;
            int dif = dist[to]-dist[i];
            int maxY = dist[i] + (l+dif)/2;

            if(maxY < L)
                continue;
            if(maxY == L)
            {
                if(dist[i] != L && dist[to] != L)
                    cnt++;
            }
            else
            {
                if(dist[i] < L)
                    cnt++;
                if(dist[to] < L)
                    cnt++;
            }
        }       
    }
    cout << cnt/2;
}