#include <iostream>
#include <iomanip>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <map>
#include<unordered_map>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#include<bitset>
#include<deque>
#include<string>
#include<list>
#include<iterator>
#include<sstream>
#include <algorithm>
#define lli long long int
#define lower(a) transform(a.begin(),a.end(),a.begin(),::tolower);


using namespace std;

const int N = 3e5 + 500;
const long long mod = 1e9 + 7;
const long long INF = 1LL << 57;
const int M = 1e6 + 500;
const lli ths = 1LL << 40;

vector<lli> graph[N];
bool vis[N];
lli indeg[N] ;
queue<lli> q;
lli cnt = 0;
lli n, m;

bool iscycle()
{
    for(int i = 1; i <= n ; i++)
    {
        if(!indeg[i])
            q.push(i);
    }
    while(!q.empty())
    {
        lli x = q.front();
//        vis[x] = 1;
        q.pop();
        for(auto it : graph[x])
        {
            if(--indeg[it] == 0)
            {
                q.push(it);
            }
        }
        cnt ++;
    }
    if(cnt != n)
        return true ;
    return false ;
}

void solve()
{
    cin>>n>>m;
    vector<pair<lli, lli > > edg;
    for(int i = 0; i < m; i ++)
    {
        lli u, v;
        cin>>u>>v;
        graph[u].push_back(v);
        edg.push_back({u, v});
        indeg[v] ++;
    }
    bool ok ;
    ok = iscycle();
    if(!ok)
    {
        cout<<1<<endl;
        for(int i = 1; i <= m; i ++)
            cout<<1<<' ';
        cout<<endl;
    }
    else
    {
        cout<<2<<endl;
        for(int i = 0; i < m; i ++)
        {
            if(edg[i].first > edg[i].second)
                cout<<1<<' ';
            else
                cout<<2<<' ';
        }
    }
    return ;
}

/*
*/

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    lli t;
    t = 1;
    //cin>>t;
    while(t --)
    {
        solve();
    }
    return 0;
}
