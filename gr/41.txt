#include <iostream>
#include <iomanip>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <map>
#include<unordered_map>
#include <set>
#include <queue>
#include <stack>
#include <vector>
#include<bitset>
#include<deque>
#include<string>
#include<list>
#include<iterator>
#include<sstream>
#include <algorithm>
#include <math.h>

#define lli long long int
#define lower(a) transform(a.begin(),a.end(),a.begin(),::tolower);

using namespace std;

const int N = 3e5 + 500;
const long long mod = 1e9 + 7;
const long long cmod = 998244353 ;
const long long inf = 1LL << 61;
const int M = 1e6 + 500;
const lli ths = 1LL << 40;
const int NN = 5e5 + 6;

vector<lli> graph[N];
bool vis[N];

lli ord[N];
bool cmp(lli a, lli b) {
    return ord[a] <= ord[b];
}
vector<lli> v;

void bfs() {
    queue<lli> q;
    q.push(1);
    while(!q.empty()) {
        lli u = q.front();
        q.pop();
        v.push_back(u);
        vis[u] = 1;
        for(auto it : graph[u]) {
            if(vis[it])
                continue ;
            q.push(it);
        }
    }
    return ;
}

void solve()
{
    lli n;
    cin>>n;
    for(int i = 1; i < n; i ++) {
        lli u, v;
        cin>>u>>v;
        graph[u].push_back(v);
        graph[v].push_back(u);
    }
    lli a[n];
    for(int i = 0; i < n; i ++) {
        cin>>a[i];
        ord[a[i]] = i;
    }
    for(int i = 0; i <= n; i ++) {
        sort(graph[i].begin(), graph[i].end(), cmp);
    }
    bfs();
    for(int i = 0; i < n; i ++) {
        if(v[i] !=  a[i]) {
            cout<<"No";
            return ;
        }
    }
    cout<<"Yes";
    cout<<'\n';
    return ;
}

/*
*/
;
int main()
{
    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);

    int t = 1;
 //   cin>>t;
    while(t --)
    {
        solve();
    }
    return 0;
}
