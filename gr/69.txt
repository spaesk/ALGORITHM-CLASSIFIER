#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef double lf;
typedef long double Lf;
typedef pair <int,int> pii;
typedef pair <ll, ll> pll;

#define TRACE(x) cerr << #x << "  " << x << endl
#define FOR(i, a, b) for (int i = (a); i < int(b); i++)
#define REP(i, n) FOR(i, 0, n)
#define all(x) (x).begin(), (x).end()
#define _ << " " <<

#define fi first
#define sec second
#define mp make_pair
#define pb push_back

const int MAXN = 100100;

struct UnionF {
  int p[MAXN];

  void init() {
    REP(i, MAXN) p[i] = i;
  }

  int find(int x) {
    if (x == p[x]) return x;
    return p[x] = find(p[x]);
  }

  int spoji(int a, int b) {
    a = find(a);
    b = find(b);
    if (a == b) return 0;
    p[a] = b;
    return 1;
  }
}U;

int n, m;

vector <int> E[MAXN];
vector <pii> v[MAXN];

int ans;
set <int> nisam, obrada, gotov;

void dfs(int cvor) {
  obrada.erase(cvor);
  gotov.insert(cvor);
  for (auto i : v[cvor]) {
    int last = i.fi - 1;
    while (1) {
      auto it = nisam.lower_bound(last + 1);
      if (it == nisam.end() || *it > i.sec) break;
      last = *it - 1;
      obrada.insert(*it);
      U.spoji(cvor, *it);
      nisam.erase(it);
    }
  }

  while (!obrada.empty()) {
    dfs(*obrada.begin());
  }

  while (!gotov.empty()) {
    int tmp = *gotov.begin();
    gotov.erase(tmp);
    for (auto ncvor : E[tmp]) {
      int t = U.spoji(tmp, ncvor);
      if (t) {
        ans++;
        obrada.insert(ncvor);
        nisam.erase(ncvor);
        dfs(ncvor);
      }
    }
  }
}

int main() {
  scanf("%d %d",&n,&m);
  REP(i, m) {
    int a, b;
    scanf("%d %d",&a,&b);
    E[a].pb(b);
    E[b].pb(a);
  }

  U.init();

  REP(i, MAXN) {
    sort(all(E[i]));
    int last = 1;
    for (auto x : E[i]) {
      if (x != last) v[i].pb({last, x - 1});
      last = x + 1;
    }
    if (last <= n) v[i].pb({last, n});
  }

  FOR(i, 2, n + 1) nisam.insert(i);
  obrada.insert(1);
  dfs(1);
  
  printf("%d\n",ans);
  return 0;
}
